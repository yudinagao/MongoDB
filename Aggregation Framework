# Populate new collection
use training
db.marks.insert({"name":"Ramesh","subject":"maths","marks":87})
db.marks.insert({"name":"Ramesh","subject":"english","marks":59})
db.marks.insert({"name":"Ramesh","subject":"science","marks":77})
db.marks.insert({"name":"Rav","subject":"maths","marks":62})
db.marks.insert({"name":"Rav","subject":"english","marks":83})
db.marks.insert({"name":"Rav","subject":"science","marks":71})
db.marks.insert({"name":"Alison","subject":"maths","marks":84})
db.marks.insert({"name":"Alison","subject":"english","marks":82})
db.marks.insert({"name":"Alison","subject":"science","marks":86})
db.marks.insert({"name":"Steve","subject":"maths","marks":81})
db.marks.insert({"name":"Steve","subject":"english","marks":89})
db.marks.insert({"name":"Steve","subject":"science","marks":77})
db.marks.insert({"name":"Jan","subject":"english","marks":0,"reason":"absent"})

# Limiting the rows on the output
db.marks.aggregate([{"$limit":2}])

# Sorting ASC and DESC
db.marks.aggregate([{"$sort":{"marks":1}}])
db.marks.aggregate([{"$sort":{"marks":-1}}])

# 2 stages Pipeline - Limiting and sorting DESC
db.marks.aggregate([
{"$sort":{"marks":-1}},
{"$limit":2}
])

#GROUPING BY sing operator as $sum, $avg, $min, $max =  SELECT subject, average(marks) FROM marks GROUP BY subject
db.marks.aggregate([
{
    "$group":{
        "_id":"$subject",
        "average":{"$avg":"$marks"}
        }
}
])

# 3 stage pipeline - limiting by 2, sorting DESC and by AVG
db.marks.aggregate([
{
    "$group":{
        "_id":"$name",
        "average":{"$avg":"$marks"}
        }
},
{
    "$sort":{"average":-1}
},
{
    "$limit":2
}
])

# PROBLEMS
#Find the total marks for each student across all subjects.
db.marks.aggregate([ { "$group":{"_id":"$name","total":{"$sum":"$marks"}} } ]) 
#Find the maximum marks scored in each subject.
db.marks.aggregate([ { "$group":{"_id":"$subject","max_marks":{"$max":"$marks"}} } ])
#Find the minimum marks scored by each student.
db.marks.aggregate([ { "$group":{"_id":"$name","min_marks":{"$min":"$marks"}} } ]) 
#Find the top two subjects based on average marks.
db.marks.aggregate([ { "$group":{ "_id":"$subject", "average":{"$avg":"$marks"} } }, { "$sort":{"average":-1} }, { "$limit":2 } ]) 

